---
title: "Raport z projektu zaliczeniowego: Analiza Danych Niekompletnych (2024)"
author: "Kamila Kraśniewska (123019)"
format: 
  html:
    self-contained: true
    number-sections: true
    toc: true
    toc-title: "Spis treści"
editor: source
---



# Wstęp

Informacje o wyniku na Kaggle:

-   nick: kamilakrasniewska

-   wynik: 96875.37

W ramach projektu zastosowano cztery metody: imputację dedukcyjną, imputację metodą k-najbliższych sąsiadów, imputację przy użyciu modelu logistycznego i predykcję przy użyciu lasu losowego. Informacje o metodach spoza zakresu zajęć pozyskano z:

1.  Model logistyczny: ["Imputation in R: Top 3 Ways for Imputing Missing Data"](https://www.appsilon.com/post/imputation-in-r#missforest)

2.  Las losowy: kurs na datacamp.com ["Handling Missing Data with Imputations in R"](https://app.datacamp.com/learn/courses/handling-missing-data-with-imputations-in-r)

W ramach projektu wykorzystano LLM ChatGPT do przyporządkowania nazw obszarów Poznania do oficjlanych nazw dzielnic miasta w możliwie największym stopniu. W tym celu wysłano zapytanie z załącznikiem zawierającym poprawne nazwy dzielnic i prośbą o przyporządkowanie tych potocznych nazw do nazw z pliku.

# Metodyka

Projekt wykonano w języku R (wersja 4. 4. 2), korzystając z RStudio. Dane treningowe i testowe zostały połączone w jeden zbiór. W ramach pierwszego etapu dokonano eksploracji danych. Wykluczono występowanie zduplikowanych id oraz błędów w logice między datami aktywacji, modyfikacji i wygaśnięcia ogłoszeń. Znaleziono wartości puste w zbiorze danych i zastąpiono je przez "NA" dla ujednolicenia sposobu prezentacji braków. Następnie wykryto wartości odstające i nietypowe ze względu na charakter zmiennych. Po zbadaniu tych wartości te uznane za niepoprawne zmienione na braki danych.

W kolejnym etapie wykonano imputacje dedukcyjną, wnioskując na podstawie tytułów ogłoszeń. W ten sposób zaimputowano nie tylko część brakujących danych, ale zweryfikowano również poprawność innych (obecnych) danych. Metodę zastosowano dla danych logicznych, numerycznych oraz zmiennej kategorycznej (dzielnica). Zauważono, że w kolumnie "quarter" pojawiają się potoczne nazwy dzielnic, nazwy oficjalne, nazwy osiedli, części dzielnic etc. W związku z tym, postanowiono spróbować możliwie je ujednolicić. Z tytułów ogłoszeń wyekstrahowano nazwy dzielnic (nieoficjalne i oficjalne) i zaimputowano uzyskane wartości. W drugim etapie ujednolicono nazewnictwo dzielnic - przypisano do bardziej ogólnych nazw dzielnic. Plik zewnętrzny o nazwie Dzielnice_Poznan.xlsx to plik opracowany przy użyciu ChatGpt.

W kolejnym etapie wyodrębniono zbiór danych bez tytułów ogłoszeń dla usprawnienia dalszych metod imputacji. Zastosowano imputację metodą k-najbliższych sąsiadów (k=3) do zaimputowania brakujących danych o dzielnicach. Następnie zbadano korelacje pomiędzy zmiennymi i na podstawie wyników wykorzystano modele regresji logistycznej do imputacji brakująych danych w kolumnach "flat_furnished", "flat_internet" i "flat_closed_area". Kolejnym krokiem było ponowne zastosowanie imputacji metodą k-najbliższych sąsiadów dla zmiennych binarnych, w których nadal występowały braki (k=4). Następnie, zmienne numeryczne "flat_area", "flat_rent" i "flat_rooms" zaimputowano wykorzystując imputację wielokrotną (MICE) z modelem PMM.

W ostatnim etapie, w celu predykcji wartości cen, zastosowano las losowy. Prace projektowe pozwoliły na uzupełnienie wszystkich braków danych i predykcji cen ("price"). Wartości "price" dla obserwacji ze zbioru testowego zapisano do pliku "output.csv", które załadowano do kaggle.com.

# Wyniki

W wyniku prac projektowych wszystkie brakujące dane zostały uzupełnione. Model predykcyjny uzyskał satysfakcjonujące wyniki - błąd średniokwadratowy na poziomie niższym niż 100000. Zastosowane metody można uznać za skuteczne. Rozkład przewidywanej zmiennej nie uległ znacznej zmianie.

![](images/clipboard-210354067.png){fig-align="center" width="529"}

![](images/clipboard-3293251708.png){fig-align="center" width="530"}

Realizując projekt sprawdzono wiele rozwiązań (dokładnie 14), różniących się głównie sposobem łączenia i kolejnością stosowania metod imputacji. Pare początkowych wyników wrzucanych na kaggle.com miało służyć sprawdzeniu jak zmienianie i uszczegóławianie podejścia przybliża wyniki do rzeczywistych. Kilka wyników to te dotyczące zaprezentowanego w raporcie podejścia. Różnią się wartościami paramterów modeli: liczba sąsiadów w metodzie KNN oraz liczba drzew w metodzie lasu losowego. Pomimo tego, że las losowy z większą liczbą drzew gwarantował wyniki najbardziej zbliżone do rzeczywistych, zdecydowano zmniejszyć liczbę drzew dla przyspieszenia obliczeń przy zachowaniu zadowalającego wyniku.

# Podsumowanie

W ramach projektu dotyczącego danych o mieszkaniach przeznaczanych na wynajem w Poznaniu dokonano kompleksowej imputacji. Po eksploracji danych i skorygowaniu wartości odstająych, zastosowano imputację dedukcyjną opierającą się na analizie tytułów ogłoszeń, co pozwoliło nie tylko uzupełnić brakujące informacje, ale także poprawić jakość danych już obecnych w zbiorze. W dalszych krokach dokonano imputacji metodą k-najbliższych sąsiadów oraz regresji logistycznej, co umożliwiło dalsze uzupełnianie braków. Finalnie, użyto lasu losowego do przewidywania brakujących wartości numerycznych, co pozwoliło uzyskać finalny wynik. Ostatecznie średnia z sumy kwadratów różnic między wartościami prawdziwymi cen, a przewidywanymi okazała się być na zadowalającym poziomie.

Jak wskazano wyżej LLM ChatGpt został wykorzystany do przeszukania sieci i przyporządkowania obszarów Poznania do odpowiednich dzielnic. Pomimo tego, że polecenie nie zostało wykonane w pełni, to z pewnością zredukowało czas poświęcony na przeszukiwanie źródeł interneowych przez autorkę. W związaku z tym doświadczenie można uznać za pozytywne.

Dzięki realizacji projektu autorka raportu nabyła praktyczne umiejętności w wykrywaniu braków i błędów danych oraz dopasowywaniu odpowiednich metod imputacji. Istotna była możliwość przetestowania różnych podejść do braków danych i zobaczenia ich rezultatów. Umożliwiło to praktyczne porównanie działania tych metod. W trakcie realizacji projektu autorka znacząco poprawiła umiejętności posługiwania się językiem R.

# Kody do odtworzenia wyników

Instalacja i wczytywanie pakietów:



```{r}
options(repos = c(CRAN = "https://cran.r-project.org"))
install.packages("rmarkdown")
install.packages("data.table")
install.packages("dplyr")
install.packages("readxl")
install.packages("stringr")
install.packages("ggplot2")
install.packages("VIM")
install.packages("xtable")
install.packages("naniar")
install.packages("ranger")
install.packages("mice")
library(mice)
library(readxl)
library(VIM)
library(ranger)
library(naniar)
library(ggplot2)
library(data.table)
library(dplyr)
library(xtable)
library(stringr)
pdf.options(encoding = "CP1250")
```



Wczytanie danych:



```{r}
data_train <- read.csv("C:/Users/kamil/ProjektADN/daneNiekompletneR_V5/mieszkaniaPoznan/train.csv")

data_test <- read.csv("C:/Users/kamil/ProjektADN/daneNiekompletneR_V5/mieszkaniaPoznan/test.csv")
```



Przetwarzanie danych:



```{r}
#Połączenie danych w jeden zbiór
all_data <- bind_rows(data_train, data_test)

#Powielenie ramki - stworzenie ramki do modyfikacji
all_data_edit <- all_data
```



Sprawdzenie czy wszystkie id są unikalne i logiczności dat:



```{r}
# Sprawdzenie czy wszystkie id są unikalne
is_unique <- length(all_data$id) == length(unique(all_data$id))
if (is_unique) {
  print("Wszystkie id są unikalne.")
} else {
  print("Są zduplikowane wartości w kolumnie id.")
}
#Wynik: Wszystkie id są unikalne

#Zamiana na typ danych Date
all_data_edit$date_activ <- as.Date(all_data_edit$date_activ)
all_data_edit$date_modif <- as.Date(all_data_edit$date_modif)
all_data_edit$date_expire <- as.Date(all_data_edit$date_expire)

logic_errors_dates <- all_data_edit %>%
  filter(date_activ > date_expire | date_activ > date_modif)
nrow(logic_errors_dates)

#Wniosek: nie ma tego rodzaju błędów w datach

#Znajdowanie braków oznaczonych inaczej niż "NA"
print(all_data_edit %>%
        miss_scan_count(search = list("N/A", "N/a", "missing", " ")), n=40)

#Wartości puste występują w kolumnie "quarter" - zamiana " " na NA
all_data_edit <- all_data_edit %>%
  mutate(quarter = ifelse(quarter == "", NA, quarter))
```



Wstępna wizualizacja braków:



```{r}
gg_miss_var(all_data_edit)
gg_miss_case(all_data_edit)
vis_miss(all_data_edit, cluster = TRUE, sort_miss = TRUE)
```



Identyfikacja wartości odstających, nietypowych dla konkretnych zmiennych:



```{r}
#Krótkie podsumowanie
summary(all_data_edit)

#Wykryte wartości:
  #flat_area - wartości mniejsze od 0 i rzędu tysięcy
  #flat_rooms - wartości mniejsze od 0
  #flat_rent  - 17000 i 50000
  #flat_deposit - 28000 i 600067
  #building_floor_number - pare możliwych wysokich wartości - do weryfikacji z tytułem ogłoszenia
```



Zamiana wartości z wysokim prawdopodobieństwem niepoprawnych na NA:



```{r}
#wartość flat_area mniejsza od 0 i wieksza od 500 -> NA
all_data_edit <- all_data_edit %>%
  mutate(flat_area = ifelse(flat_area <= 0 | flat_area > 500, NA, flat_area))

#wartość flat_rooms mniejsza od 0 -> NA
all_data_edit <- all_data_edit %>%
  mutate(flat_rooms = ifelse(flat_rooms <= 0, NA, flat_rooms))

#wartość flat_rent jednostkowa lub wieksza od 10000 -> NA
all_data_edit <- all_data_edit %>%
  mutate(flat_rent = ifelse(flat_rent > 0 & flat_rent <= 10 | flat_rent > 10000, NA, flat_rent))

#wartość flat_deposit większa od 15000 -> NA
all_data_edit <- all_data_edit %>%
  mutate(flat_deposit = ifelse(flat_deposit > 15000, NA, flat_deposit))
```



Imputacja dedukcyjna - imputacja danych wywnioskowanych z tytułów ogłoszeń:



```{r}
#Powielenie ramki danych - dalsza praca na nowej ramce 
all_data_regex <- all_data_edit
```



-   zmienne logiczne:



```{r}
#Komentarze nad kodem wskazują, dla jakiej kolumny wykonywane są operacje
#Operacje wykonywane dla kolumn są bardzo podobne, więc dla zachowania przejrzystości zachowano komentarze tylko dla pierwszego przypadku

#individual
#dodanie kolumny individual_cl z danymi dotyczącymi zmiennej individual wywnioskowanych z kolumny ad_title
all_data_regex <- all_data_regex %>%
  mutate(individual_cl = case_when(
    str_detect(str_to_lower(ad_title), "oferta prywatna|osoba prywatna|os\\. prywatn|prywatne|prywatnie|bez pośrednik|bezpo|bez po") ~ TRUE,
    TRUE ~ NA_real_ 
  ))
#porównanie danych między kolumnami individual i individual_cl. W przypadku braku danych w individual wstawienie danych z individual_cl. Następnie usunięcie roboczej kolumny individual_cl
all_data_regex <- all_data_regex %>%
  mutate(individual = coalesce(individual, individual_cl)) %>%
  select(-individual_cl) 
#zapewnienie, że dane w kolumnie individual są typu logicznego
all_data_regex$individual <- as.logical(all_data_regex$individual)

#flat_balcony
all_data_regex <- all_data_regex %>%
  mutate(flat_balcony_cl = case_when(
    str_detect(str_to_lower(ad_title), "balk") ~ TRUE,
    TRUE ~ NA_real_ 
  ))

all_data_regex <- all_data_regex %>%
  mutate(flat_balcony = if_else(!is.na(flat_balcony_cl), flat_balcony_cl, flat_balcony)) %>%
  select(-flat_balcony_cl)  

all_data_regex$flat_balcony <- as.logical(all_data_regex$flat_balcony)

#flat_furnished
extract_furniture <- function(ad_title) {
  ad_title <- tolower(ad_title) # Convert to lowercase
  case_when(
    str_detect(ad_title, "\\bumeblow") ~ TRUE,
    str_detect(ad_title, "\\bmebl") ~ TRUE,
    str_detect(ad_title, "umebl[^\\w]") ~ TRUE,
    str_detect(ad_title, "\\b umeb") ~ TRUE,
    str_detect(ad_title, "\\bumebl\\.") ~ TRUE,
    str_detect(ad_title, "\\bwyposa") ~ TRUE,
    str_detect(ad_title, "\\bnieumebl") ~ FALSE,
    str_detect(ad_title, "\\bbez mebl") ~ FALSE,
    TRUE ~ NA
  )
}

all_data_regex$flat_furnished_cl <- extract_furniture(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_furnished = if_else(!is.na(flat_furnished_cl), flat_furnished_cl, flat_furnished)) %>%
  select(-flat_furnished_cl) 

#flat_for_students
extract_for_students <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title) 
    contains_student <- str_detect(ad_title, "student")
    if (!contains_student) {
      return(NA)  
    }
    return(TRUE)  
  })
}
all_data_regex$flat_for_students_cl <- extract_for_students(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_for_students = if_else(!is.na(flat_for_students_cl), flat_for_students_cl, flat_for_students)) %>%
  select(-flat_for_students_cl) 

#flat_garage
extract_garage <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title) 
    contains_gara <- str_detect(ad_title, "gara")
    if (!contains_gara) {
      return(NA)  
    }
    return(TRUE)
  })
}

all_data_regex$flat_garage_cl <- extract_garage(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_garage = if_else(!is.na(flat_garage_cl), flat_garage_cl, flat_garage)) %>%
  select(-flat_garage_cl) 

#flat_garden
extract_garden <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title) 
    if (str_detect(ad_title, "na ogrod")) {
      return(NA)
    }
    if (str_detect(ad_title, "(ogrod|ogród|z ogrodem|ogródk)")) {
      return(TRUE)
    }
    return(NA)
  })
}

all_data_regex$flat_garden_cl <- extract_garden(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_garden = if_else(!is.na(flat_garden_cl), flat_garden_cl, flat_garden)) %>%
  select(-flat_garden_cl) 

#flat_dishwasher
extract_dishwasher <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_dishwasher <- str_detect(ad_title, "zmywar")
    if (!contains_dishwasher) {
      return(NA) 
    }
    return(TRUE)  
  })
}
all_data_regex$flat_dishwasher_cl <- extract_dishwasher(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_dishwasher = if_else(!is.na(flat_dishwasher_cl), flat_dishwasher_cl, flat_dishwasher)) %>%
  select(-flat_dishwasher_cl)

#flat_internet
extract_internet <- function(ad_title) {
  ad_title <- tolower(ad_title)
  case_when(
    str_detect(ad_title, "\\bmedia") ~ TRUE,
    str_detect(ad_title, "\\bwifi") ~ TRUE,
    str_detect(ad_title, "\\binternet") ~ TRUE,
    str_detect(ad_title, "\\bintern") ~ TRUE,
    str_detect(ad_title, "\\bwi-fi") ~ TRUE,
    TRUE ~ NA
  )   
}

all_data_regex$flat_internet_cl <- extract_internet(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_internet = if_else(!is.na(flat_internet_cl), flat_internet_cl, flat_internet)) %>%
  select(-flat_internet_cl)

#flat_closed_area
extract_closed_area <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_closed_area <- str_detect(ad_title, "zamkn")
    if (!contains_closed_area) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_closed_area_cl <- extract_closed_area(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_closed_area = if_else(!is.na(flat_closed_area_cl), flat_closed_area_cl, flat_closed_area)) %>%
  select(-flat_closed_area_cl)

#flat_utility_room
extract_utility_room <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_utility_room <- str_detect(ad_title, "gosp")
    if (!contains_utility_room) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_utility_room_cl <- extract_utility_room(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_utility_room = if_else(!is.na(flat_utility_room_cl), flat_utility_room_cl, flat_utility_room)) %>%
  select(-flat_utility_room_cl)

#flat_basement
extract_basement <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_basement <- str_detect(ad_title, "piwn")
    if (!contains_basement) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_basement_cl <- extract_basement(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_basement = if_else(!is.na(flat_basement_cl), flat_basement_cl, flat_basement)) %>%
  select(-flat_basement_cl)

#flat_tarrace
extract_tarrace <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_tarrace <- str_detect(ad_title, "taras")
    if (!contains_tarrace) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_tarrace_cl <- extract_tarrace(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_tarrace = if_else(!is.na(flat_tarrace_cl), flat_tarrace_cl, flat_tarrace)) %>%
  select(-flat_tarrace_cl)

#flat_lift
extract_lift <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_lift <- str_detect(ad_title, "wind")
    if (!contains_lift) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_lift_cl <- extract_lift(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_lift = if_else(!is.na(flat_lift_cl), flat_lift_cl, flat_lift)) %>%
  select(-flat_lift_cl)

#flat_two_level
extract_two_level <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_two_level <- str_detect(ad_title, "pozio")
    if (!contains_two_level) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_two_level_cl <- extract_two_level(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_two_level = if_else(!is.na(flat_two_level_cl), flat_two_level_cl, flat_two_level)) %>%
  select(-flat_two_level_cl)

#flat_air_cond
extract_air_cond <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_air_cond <- str_detect(ad_title, "klimatyza")
    if (!contains_air_cond) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_air_cond_cl <- extract_air_cond(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_air_cond = if_else(!is.na(flat_air_cond_cl), flat_air_cond_cl, flat_air_cond)) %>%
  select(-flat_air_cond_cl)

#flat_television
extract_flat_tv <- function(ad_title) {
  ad_title <- tolower(ad_title)
  case_when(
    str_detect(ad_title, "\\btv") ~ TRUE,
    str_detect(ad_title, "\\btelew") ~ TRUE,
    TRUE ~ NA
  )   
}

all_data_regex$flat_television_cl <- extract_flat_tv(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_television = if_else(!is.na(flat_television_cl), flat_television_cl, flat_television)) %>%
  select(-flat_television_cl)

#flat_monitoring
extract_flat_monitoring <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_flat_monitoring <- str_detect(ad_title, "monitor")
    if (!contains_flat_monitoring) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_monitoring_cl <- extract_flat_monitoring(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_monitoring = if_else(!is.na(flat_monitoring_cl), flat_monitoring_cl, flat_monitoring)) %>%
  select(-flat_monitoring_cl)

#flat_kitchen_sep
extract_kitchen_sep <- function(ad_titles) {
  sapply(ad_titles, function(ad_title) {
    ad_title <- tolower(ad_title)  
    contains_kitchen_sep <- str_detect(ad_title, "kuchni")
    if (!contains_kitchen_sep) {
      return(NA) 
    }
    return(TRUE)  
  })
}

all_data_regex$flat_kitchen_sep_cl <- extract_kitchen_sep(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_kitchen_sep = if_else(!is.na(flat_kitchen_sep_cl), flat_kitchen_sep_cl, flat_kitchen_sep)) %>%
  select(-flat_kitchen_sep_cl)
```



-   zmienne numeryczne:



```{r}
#Komentarze nad kodem wskazują, dla jakiej kolumny wykonywane są operacje

#flat_rent
#funkcja, która zwraca 0, jeśli któreś z wyrażeń powiązanych z brakiem czynszu zostanie znalezione w kolumnie ad_title 
extract_rent <- function(ad_title) {
  ad_title <- tolower(ad_title) 
  case_when(
    str_detect(ad_title, "\\bbezczynsz") ~ 0,
    str_detect(ad_title, "\\bbez czynsz") ~ 0,
    str_detect(ad_title, "\\bbrak czyn") ~ 0,
    str_detect(ad_title, "\\bbez opłaty czynsz") ~ 0,
    str_detect(ad_title, "\\bbez dodatkowych opłat") ~ 0
  )}
#wywołanie funkcji i umieszczenie wyniku w nowej kolumnie flat_rent_cl
all_data_regex$flat_rent_cl <- extract_rent(all_data_regex$ad_title)
#jeśli w kolumnie flat_rent brakuje danych, wstawienie danych z flat_rent_cl i usunięcie kolumny roboczej flat_rent_cl 
all_data_regex <- all_data_regex %>%
  mutate(flat_rent = if_else(!is.na(flat_rent_cl), flat_rent_cl, flat_rent)) %>%
  select(-flat_rent_cl)

#flat_rooms
#podejście podobne jak w przykładzie powyżej
extract_rooms <- function(ad_title) {
  ad_title <- tolower(ad_title) 
  patterns_to_numbers <- c(
    "1\\s*-?pok\\.?|1pokoje|1 pokoje|1-pokoje|1 - pokojowe|1-pokojowe|1 pokojowe|1pokojowe|1 - pokojowy|1-pokojowy|1 pokojowy|1pokojowy|1 - pok|1-pok|1pokoj|1 duże pok.|1 przestronne pokoje|1 niezależne pokoje|1 oddzielone pokoje|1 oddzielne pokoje|1 osobne pokoje|1 osobne pok.|1 niezal. pokoje|1 niezależnymi pokojami|\\bjednopok|\\bkawale" = 1,
    "2\\s*-?pok\\.?|2pokoje|2 pokoje|2-pokoje|2 - pokojowe|2-pokojowe|2- pokojowe|2 pokojowe|2pokojowe|2 - pokojowy|2-pokojowy|2 pokojowy|2pokojowy|2 - pok|2-pok|2pokoj|2 duże pok.|2 przestronne pokoje|2 niezależne pokoje|2 oddzielone pokoje|2 oddzielne pokoje|2 osobne pokoje|2 osobne pok.|2 niezal. pokoje|2 niezależnymi pokojami|\\bdwupok|\\bdwa pok|\\bdwa|\\bdwu pok|2-u pok" = 2,
    "3\\s*-?pok\\.?|3pokoje|3 pokoje|3-pokoje|3 - pokojowe|3-pokojowe|3 pokojowe|3 - pokojowy|3-pokojowy|3 pokojowy|3pokojowe|3pokojowy|3 - pok|3pokoj|3 duże pok.|3 przestronne pokoje|3 niezależne pokoje|3 oddzielone pokoje|3 oddzielne pokoje|3 osobne pokoje|3 osobne pok.|3 niezal. pokoje|3 niezależnymi pokojami|\\btrzypok|\\btrzy pok|\\btrzy" = 3,
    "4\\s*-?pok\\.?|4pokoje|4 pokoje|4-pokoje|4 - pokojowe|4-pokojowe|4 pokojowe|4 - pokojowy|4-pokojowy|4 pokojowy|4pokojowe|4pokojowy|4 - pok|4pokoj|4 duże pok.|4 przestronne pokoje|4 niezależne pokoje|4 oddzielone pokoje|4 oddzielne pokoje|4 osobne pokoje|4 osobne pok.|4 niezal. pokoje|4 niezależnymi pokojami|\\bczteropok|\\bcztery pok|\\bcztery" = 4,
    "5\\s*-?pok\\.?|5pokoje|5 pokoje|5-pokoje|5 - pokojowe|5-pokojowe|5 pokojowe|5 - pokojowy|5-pokojowy|5 pokojowy|5pokojowe|5pokojowy|5 - pok|5pokoj|5 duże pok.|5 przestronne pokoje|5 niezależne pokoje|5 oddzielone pokoje|5 oddzielne pokoje|5 osobne pokoje|5 osobne pok.|5 niezal. pokoje|5 niezależnymi pokojami|\\bpięciopok" = 5
  )
  match_room_number <- function(title) {
    for (pattern in names(patterns_to_numbers)) {
      if (str_detect(title, pattern)) {
        return(patterns_to_numbers[pattern])
      }
    }
    return(NA_integer_)
  }
  sapply(ad_title, match_room_number)  
}

all_data_regex$flat_rooms_cl <- extract_rooms(all_data_regex$ad_title)

all_data_regex <- all_data_regex %>%
  mutate(flat_rooms = if_else(!is.na(flat_rooms_cl), flat_rooms_cl, flat_rooms)) %>%
  select(-flat_rooms_cl)

#flat_area
#podejście podobne jak w powyższych przykładach z różnicą taką, że do kolumny roboczej wstawiana jest wartość liczbowa przed wykrytym fragmentem tekstu
all_data_regex <- all_data_regex %>%
  mutate(flat_area_cl = str_extract(
    ad_title,
    "(?<!r|mc)\\b(?<!\\d[,.])\\d+[,.]?\\d*\\s?(?=m2|m²|mkw|mkw\\.|m kw\\.|m\\.|m|m,2|sqm)(?!\\d)"
  )) %>%
  mutate(flat_area_cl = str_replace_all(flat_area_cl, ",", ".")) %>%
  mutate(flat_area_cl = as.numeric(flat_area_cl))
all_data_regex <- all_data_regex %>%
  mutate(flat_area_cl = ifelse(flat_area_cl >= 200 | flat_area_cl < 7, NA, flat_area_cl))

all_data_regex <- all_data_regex %>%
  mutate(flat_area = if_else(!is.na(flat_area_cl), flat_area_cl, flat_area)) %>%
  select(-flat_area_cl)

#flat_deposit
#zamiana błędnej wartości na 0 - prawidłowa wartość wywnioskowana z ad_title
all_data_regex$flat_deposit[all_data_regex$id == 15415] <- 0

#price
#procedura podobna jak w poprzednich przykładach, ale wykrywanie przypadków, w których w ad_title podana jest liczba z conajmniej dwoma zerami
all_data_regex <- all_data_regex %>%
  mutate(price_cl = str_extract(ad_title, "\\b\\d*[0]{2}\\b")) %>%
  mutate(price_cl = as.numeric(price_cl)) 

#usuniecie wartosci ponizej 700 z price_cl (kolumny roboczej)
all_data_regex <- all_data_regex %>%
  mutate(price_cl = ifelse(price_cl < 700, NA, price_cl))
#jak w poprzednich przykładach
all_data_regex <- all_data_regex %>%
  mutate(price = coalesce(price, price_cl)) %>%
  select(-price_cl)  
```



-   zmienna kategoryczna ("quarter"):



```{r}
districts <- readLines("C:/Users/kamil/ProjektADN/daneNiekompletneR_V5/mieszkaniaPoznan/dzielnice_wszystkie_nazwy.txt")
#I etap
#Zdefiniowanie funkcji do wyszukiwania nazwy dzielnicy w ad_title
extract_district <- function(title, districts) {
  for (district in districts) {
    if (str_detect(title, fixed(district, ignore_case = TRUE))) {
      return(district)
    }
  }
  return(NA)
}

#Wywołanie funkcji i doodanie nowej kolumny 'quarter_cl' z wynikami
all_data_regex <- all_data_regex %>%
  mutate(quarter_cl = ifelse(is.na(quarter), sapply(ad_title, extract_district, districts), quarter))

#Porównanie informacji w oryginalnej kolumnie i kolumnie roboczej, zastąpenie nieznanych wartości oraz usunięcie kolumny roboczej
all_data_regex <- all_data_regex %>%
  mutate(quarter = coalesce(quarter, quarter_cl)) %>%
  select(-quarter_cl)

#II etap
#Wczytanie pliku excel zawierającego przyporządkowanie potocznej nazwy do bardziej ogólnego obszaru Poznania
district_mapping <- read_excel("C:/Users/kamil/ProjektADN/daneNiekompletneR_V5/mieszkaniaPoznan/Dzielnice_Poznan.xlsx")

#Przekształcenie na listę
district_list <- setNames(district_mapping$obszar, district_mapping$dzielnica_potocznie)

#Dodanie kolumny roboczej quarter_cl_2 z przyporządkowanymi nazwami obszarów
all_data_regex <- all_data_regex %>%
  mutate(quarter_cl_2 = recode(quarter, !!!district_list))
#Porównanie kolumn, wstawienie poprawionych i usunięcie kolumny roboczej
all_data_regex <- all_data_regex %>%
  mutate(quarter_cl_2 = coalesce(quarter, quarter_cl_2)) %>%
  select(-quarter_cl_2)
```



Wizualizacja braków danych przed przystąpieniem do dalszej imputacji:



```{r}
gg_miss_var(all_data_regex)
```



Powielenie wynikowego zbioru danych:



```{r}
data_for_imputation <- all_data_regex
```



Wyodrębnienie zbioru danych bez tytułów ogłoszeń dla usprawnienia dalszych metod imputacji:



```{r}
all_data_for_imputation <- data_for_imputation %>% select(-ad_title)
```



Imputacja metodą k-najbliższych sąsiadów dla zmiennej "quarter":



```{r}
#wektor zawierający nazwy kolumn z ramki danych, posortowane według liczby brakujących wartości
vars_by_NAs <- all_data_for_imputation %>%
  is.na() %>%
  colSums() %>%
  sort(decreasing = FALSE) %>%
  names()

#imputacja metodą k-najbliższych sąsiadów, gdzie k=3
set.seed(123)
all_data_for_imputation <- all_data_for_imputation %>%
  select(all_of(vars_by_NAs)) %>%
  kNN(k=3, variable = c("quarter"))
```



Imputacja z wykorzystaniem regresji logistycznej dla zmiennych binarnych: "flat_furnished", "flat_internet" i "flat_closed_area":



```{r}
#regresja logistyczna dla niektórych zmiennych binarnych: flat_furnished, flat_internet, flat_closed_area
#flat_furnished
all_data_for_imputation_II <- all_data_for_imputation
missing_flat_furnished <- is.na(all_data_for_imputation$flat_furnished)
logreg_model <- glm(flat_furnished ~ flat_washmachine + flat_fridge + flat_cooker,
                    data = all_data_for_imputation_II, family = binomial)
preds <- predict(logreg_model, type="response")
preds  <- rbinom(length(preds), size = 1, prob = preds)
all_data_for_imputation_II[missing_flat_furnished, "flat_furnished"] <- preds[missing_flat_furnished]

#flat_internet
missing_flat_internet <- is.na(all_data_for_imputation$flat_internet)
logreg_model <- glm(flat_internet ~ flat_television,
                    data = all_data_for_imputation_II, family = binomial)
preds <- predict(logreg_model, type="response")
preds  <- rbinom(length(preds), size = 1, prob = preds)
all_data_for_imputation_II[missing_flat_internet, "flat_internet"] <- preds[missing_flat_internet]

#flat_closed_area
missing_closed_area <- is.na(all_data_for_imputation$flat_closed_area)
logreg_model <- glm(flat_closed_area ~ flat_monitoring,
                    data = all_data_for_imputation_II, family = binomial)
preds <- predict(logreg_model, type="response")
preds  <- rbinom(length(preds), size = 1, prob = preds)
all_data_for_imputation_II[missing_closed_area, "flat_closed_area"] <- preds[missing_closed_area]
```



Imputacja metodą k-najbliższych sąsiadów dla zmiennych binarnych, w których nadal występują braki (k=4):



```{r}
#knn dla reszty zmiennych binarnych
set.seed(123)
all_data_for_imputation_III <- kNN(all_data_for_imputation_II, k=4, variable = c(
  "flat_for_students", "flat_dishwasher", "flat_garden", "flat_garage", "flat_balcony", "flat_internet", "flat_closed_area", "flat_furnished", "individual"))

gg_miss_var(all_data_for_imputation_III)

summary(all_data_for_imputation_III)
```



Imputacja metodą MICE z wykorzystaniem PMM dla brakujących zmiennych numerycznych:



```{r}
#przygotowanie do imputacji - wybór kolumn uwzględnionych w imputacji
data_for_imputation <- all_data_for_imputation_III[, c("id", "flat_rent", "flat_area", "flat_rooms", "building_floor_num", "flat_utility_room", "flat_basement", "flat_tarrace", "flat_lift", "flat_two_level", "flat_kitchen_sep", "flat_air_cond", "flat_nonsmokers", "flat_washmachine", "flat_fridge", "flat_cooker", "flat_oven", "flat_television", "flat_anti_blinds", "flat_monitoring", "flat_deposit", "individual", "flat_furnished", "flat_balcony", "flat_garage", "flat_garden", "flat_dishwasher", "flat_for_students", "flat_closed_area", "flat_internet")]
```

```{r}
#imputacja
mice_mod <- mice(data_for_imputation, method = 'pmm', m = 5, seed = 123)

#uzyskanie jednego zestawu danych
completed_data <- complete(mice_mod, 1)
summary(completed_data)
```

```{r}
#połączenie danych
completed_data_full <- merge(completed_data, all_data_for_imputation_III[, c("id", "quarter", "date_activ", "date_modif", "date_expire", "price")], by = "id", all.x = TRUE)
```

```{r}
#kodowanie zmiennych kategorycznych 
completed_data_full$quarter <- as.factor(completed_data_full$quarter)
```

```{r}
#wyekstrahowanie id z oryginalnych danych treningowych i testowych
train_ids <- data_train$id
test_ids <- data_test$id

#podział zaimputowanych danych na treningowe i testowe
train_data <- completed_data_full[completed_data_full$id %in% train_ids, ]
test_data <- completed_data_full[completed_data_full$id %in% test_ids, ]
```



Zastosowanie lasu losowego do predykcji wartości cen:



```{r}
set.seed(123)
#budowanie modelu lasu losowego na danych treningowych
rf_model_ranger <- ranger(
  formula         = price ~ . - id, 
  data            = train_data, 
  num.trees       = 1000,
  importance      = 'impurity', 
  min.node.size   = 5,
  respect.unordered.factors = "order"
)
#przewidywanie na danych testowych
predictions <- predict(rf_model_ranger, data = test_data)$predictions
```



Zapis wyników do pliku csv:



```{r}
#dodanie przewidywań do danych data_test
data_test$Predicted_Price <- predictions
#dodanie kolumny z numerem porządkowym
data_test$Order_Number <- seq_len(nrow(data_test))

#ramka danych z wynikami
final_data <- data_test[, c("Order_Number", "Predicted_Price")]
colnames(final_data) <- c("ID", "TARGET")

#zapisywanie wyników do pliku CSV
write.csv(final_data, "ouput.csv", row.names = FALSE) 
```



Wizualizacja rozkładu cen przed predykcją i po niej:



```{r}
missing_indices <- which(is.na(completed_data_full$price))
#wstawienie przewidywanych wartości do brakujących miejsc
completed_data_full$price[missing_indices] <- predictions
original_data <- completed_data_full
original_data$price[missing_indices] <- NA

# Rozkład przed predykcją
ggplot(data_train, aes(x = price)) +
  geom_histogram(binwidth = 50, fill = "blue", alpha = 0.7) + # Zmniejsz binwidth dla większej szczegółowości
  labs(title = "Rozkład cen przed uzupełnieniem braków", x = "Cena", y = "Liczba") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  ) +
  scale_x_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 500))

# Rozkład po predykcji
ggplot(completed_data_full, aes(x = price)) +
  geom_histogram(binwidth = 50, fill = "red", alpha = 0.7) + 
  labs(title = "Rozkład cen po uzupełnieniu braków", x = "Cena", y = "Liczba") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  ) +
  scale_x_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 500))
```

